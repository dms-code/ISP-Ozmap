/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/application/use-cases/RunServicesUseCase.ts":
/*!*********************************************************!*\
  !*** ./src/application/use-cases/RunServicesUseCase.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunServicesUseCase = void 0;\nconst IspSyncService_1 = __webpack_require__(/*! ../../infrastructure/services/IspSyncService */ \"./src/infrastructure/services/IspSyncService.ts\");\nconst OzmapSyncService_1 = __webpack_require__(/*! ../../infrastructure/services/OzmapSyncService */ \"./src/infrastructure/services/OzmapSyncService.ts\");\nclass RunServicesUseCase {\n    static start() {\n        return Promise.all([\n            IspSyncService_1.IspSyncService.sync(),\n            OzmapSyncService_1.OzmapSyncService.sync()\n        ]);\n    }\n    static stop() {\n        IspSyncService_1.IspSyncService.cancel();\n        OzmapSyncService_1.OzmapSyncService.cancel();\n    }\n}\nexports.RunServicesUseCase = RunServicesUseCase;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/application/use-cases/RunServicesUseCase.ts?");

/***/ }),

/***/ "./src/domain/entities/Box.ts":
/*!************************************!*\
  !*** ./src/domain/entities/Box.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Box = void 0;\nclass Box {\n    static fromJson(data) {\n        return new Box({\n            id: data.id,\n            name: data.name,\n            type: data.type,\n            lat: data.lat,\n            lng: data.lng,\n            ozmapData: data.ozmapData,\n        });\n    }\n    // Accepts a plain object, not a Box instance\n    constructor(data) {\n        this.__type = 'Box';\n        this.id = data.id;\n        this.name = data.name;\n        this.type = data.type;\n        this.lat = data.lat;\n        this.lng = data.lng;\n        this.ozmapData = data.ozmapData ?? null;\n    }\n    toOzmapBox() {\n        return {\n            name: this.name,\n            boxType: this.type,\n            hierarchyLevel: 1,\n            implanted: false,\n            project: \"\",\n            external_id: this.id,\n            coords: [this.lat, this.lng],\n        };\n    }\n}\nexports.Box = Box;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/domain/entities/Box.ts?");

/***/ }),

/***/ "./src/domain/entities/Cable.ts":
/*!**************************************!*\
  !*** ./src/domain/entities/Cable.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Cable = void 0;\nclass Cable {\n    static fromJson(data) {\n        return new Cable({\n            id: data.id,\n            name: data.name,\n            capacity: data.capacity,\n            boxes_connected: data.boxes_connected,\n            path: data.path,\n            ozmapData: data.ozmapData,\n        });\n    }\n    constructor(data) {\n        this.__type = 'Cable';\n        this.id = data.id;\n        this.name = data.name;\n        this.capacity = data.capacity;\n        this.boxes_connected = data.boxes_connected;\n        this.path = data.path;\n        this.ozmapData = data.ozmapData ?? null;\n    }\n}\nexports.Cable = Cable;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/domain/entities/Cable.ts?");

/***/ }),

/***/ "./src/domain/entities/Customer.ts":
/*!*****************************************!*\
  !*** ./src/domain/entities/Customer.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Customer = void 0;\nclass Customer {\n    constructor(data) {\n        this.__type = 'Customer';\n        this.id = data.id;\n        this.code = data.code;\n        this.name = data.name;\n        this.address = data.address;\n        this.box_id = data.box_id;\n        this.ozmapData = data.ozmapData ?? null;\n    }\n    static fromJson(data) {\n        return new Customer({\n            id: data.id,\n            code: data.code,\n            name: data.name,\n            address: data.address,\n            box_id: data.box_id,\n            ozmapData: data.ozmapData,\n        });\n    }\n}\nexports.Customer = Customer;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/domain/entities/Customer.ts?");

/***/ }),

/***/ "./src/domain/entities/DropCable.ts":
/*!******************************************!*\
  !*** ./src/domain/entities/DropCable.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropCable = void 0;\nclass DropCable {\n    constructor(data) {\n        this.__type = 'DropCable';\n        this.id = data.id;\n        this.name = data.name;\n        this.box_id = data.box_id;\n        this.customer_id = data.customer_id;\n        this.ozmapData = data.ozmapData ?? null;\n    }\n    static fromJson(data) {\n        return new DropCable({\n            id: data.id,\n            name: data.name,\n            box_id: data.box_id,\n            customer_id: data.customer_id,\n        });\n    }\n}\nexports.DropCable = DropCable;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/domain/entities/DropCable.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst RunServicesUseCase_1 = __webpack_require__(/*! ./application/use-cases/RunServicesUseCase */ \"./src/application/use-cases/RunServicesUseCase.ts\");\nasync function main() {\n    console.log('Iniciando Serviços de Sincronização. Pressione Ctrl+C para encerrar.');\n    await RunServicesUseCase_1.RunServicesUseCase.start();\n}\nfunction dispose() {\n    console.log('Encerrando serviços...');\n    RunServicesUseCase_1.RunServicesUseCase.stop();\n    process.exit(0);\n}\nprocess.on('SIGINT', dispose);\nprocess.on('SIGTERM', dispose);\nmain();\n\n\n//# sourceURL=webpack://isp-ozmap/./src/index.ts?");

/***/ }),

/***/ "./src/infrastructure/database/MongoDbManager.ts":
/*!*******************************************************!*\
  !*** ./src/infrastructure/database/MongoDbManager.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoDbManager = void 0;\nconst mongodb_1 = __webpack_require__(/*! mongodb */ \"mongodb\");\nconst env_1 = __webpack_require__(/*! ../../shared/config/env */ \"./src/shared/config/env.ts\");\nclass MongoDbManager {\n    constructor() {\n        this.client = new mongodb_1.MongoClient(env_1.EnvConfig.getMongoUri());\n        this.dbName = env_1.EnvConfig.getMongoDb();\n    }\n    async connect() {\n        await this.client.connect();\n        this.db = this.client.db(this.dbName);\n    }\n    async disconnect() {\n        await this.client.close();\n    }\n}\nexports.MongoDbManager = MongoDbManager;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/database/MongoDbManager.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/box/BoxApiSource.ts":
/*!************************************************************!*\
  !*** ./src/infrastructure/datasources/box/BoxApiSource.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BoxApiSource = void 0;\nconst BoxDTO_1 = __webpack_require__(/*! ./BoxDTO */ \"./src/infrastructure/datasources/box/BoxDTO.ts\");\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"axios\"));\nconst env_1 = __webpack_require__(/*! ../../../shared/config/env */ \"./src/shared/config/env.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass BoxApiSource {\n    async get(data) {\n        return null;\n    }\n    async getData() {\n        try {\n            const baseUrl = env_1.EnvConfig.getIspServerUrl();\n            const endpoint = env_1.EnvConfig.getIspBoxesEndpoint();\n            const url = `${baseUrl}${endpoint}`;\n            logger_1.default.info(`Chamando API: ${url}`);\n            const response = await axios_1.default.get(url);\n            return Array.isArray(response.data)\n                ? response.data.map((json) => new BoxDTO_1.BoxDTO().fromJson(json))\n                : [];\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao buscar boxes do ISP API:', error);\n            return [];\n        }\n    }\n    async save(data) {\n        return true;\n    }\n}\nexports.BoxApiSource = BoxApiSource;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/box/BoxApiSource.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/box/BoxDTO.ts":
/*!******************************************************!*\
  !*** ./src/infrastructure/datasources/box/BoxDTO.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BoxDTO = void 0;\nclass BoxDTO {\n    fromJson(json) {\n        this.id = Number(json.id);\n        this.name = json.name;\n        this.type = json.type;\n        this.lat = Number(json.lat);\n        this.lng = Number(json.lng);\n        return this;\n    }\n}\nexports.BoxDTO = BoxDTO;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/box/BoxDTO.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/box/BoxMongoSource.ts":
/*!**************************************************************!*\
  !*** ./src/infrastructure/datasources/box/BoxMongoSource.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BoxMongoSource = void 0;\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nconst Box_1 = __webpack_require__(/*! ../../../domain/entities/Box */ \"./src/domain/entities/Box.ts\");\nclass BoxMongoSource {\n    constructor(mongoDbManager) {\n        this.mongoDbManager = mongoDbManager;\n    }\n    async get(data) {\n        let isConnected = false;\n        try {\n            await this.mongoDbManager.connect();\n            isConnected = true;\n            const db = this.mongoDbManager['db'];\n            if (!db) {\n                throw new Error('MongoDB não conectado');\n            }\n            const boxDoc = await db.collection('boxes').findOne({ id: data.id });\n            if (!boxDoc) {\n                return null;\n            }\n            // Popula o objeto Box, inclusive ozmapData\n            return new Box_1.Box({\n                id: boxDoc.id,\n                name: boxDoc.name,\n                type: boxDoc.type,\n                lat: boxDoc.lat,\n                lng: boxDoc.lng,\n                ozmapData: boxDoc.ozmapData ?? null,\n            });\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao buscar box no MongoDB:', error);\n            return null;\n        }\n        finally {\n            if (isConnected) {\n                await this.mongoDbManager.disconnect();\n            }\n        }\n    }\n    async getData() {\n        // TODO: Implementar integração real com MongoDB\n        return [];\n    }\n    async save(data) {\n        let isConnected = false;\n        try {\n            await this.mongoDbManager.connect();\n            isConnected = true;\n            const db = this.mongoDbManager['db'];\n            if (!db) {\n                throw new Error('MongoDB não conectado');\n            }\n            await db.collection('boxes').updateOne({ id: data.id }, {\n                $set: {\n                    id: data.id,\n                    name: data.name,\n                    type: data.type,\n                    lat: data.lat,\n                    lng: data.lng,\n                    ozmapData: data.ozmapData\n                }\n            }, { upsert: true });\n            return true;\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao salvar box no MongoDB:', error);\n            return false;\n        }\n        finally {\n            if (isConnected) {\n                await this.mongoDbManager.disconnect();\n            }\n        }\n    }\n}\nexports.BoxMongoSource = BoxMongoSource;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/box/BoxMongoSource.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/box/BoxOzmapSource.ts":
/*!**************************************************************!*\
  !*** ./src/infrastructure/datasources/box/BoxOzmapSource.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BoxOzmapSource = void 0;\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass BoxOzmapSource {\n    async get(data) {\n        return null;\n    }\n    constructor(sdk) {\n        this.sdk = sdk;\n    }\n    async saveBox(data) {\n        try {\n            return await this.sdk.box.create(data);\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao salvar box no Ozmap:', error);\n            throw error;\n        }\n    }\n    async getData() {\n        return [];\n    }\n    async save(data) {\n        return false;\n    }\n}\nexports.BoxOzmapSource = BoxOzmapSource;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/box/BoxOzmapSource.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/box/BoxTypeOzmapSource.ts":
/*!******************************************************************!*\
  !*** ./src/infrastructure/datasources/box/BoxTypeOzmapSource.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BoxTypeOzmapSource = void 0;\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass BoxTypeOzmapSource {\n    async get(data) {\n        return null;\n    }\n    constructor(sdk) {\n        this.sdk = sdk;\n    }\n    async getData() {\n        try {\n            logger_1.default.info('Fetching box types from Ozmap API');\n            const response = await this.sdk.boxType.find();\n            if (!response.count)\n                return [];\n            return response.rows;\n        }\n        catch (error) {\n            logger_1.default.error('Error fetching box types from Ozmap:', error instanceof Error ? error.message : error);\n            throw new Error('Failed to fetch box types from Ozmap API');\n        }\n    }\n    async save(data) {\n        return false;\n    }\n}\nexports.BoxTypeOzmapSource = BoxTypeOzmapSource;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/box/BoxTypeOzmapSource.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/cable/CableApiSource.ts":
/*!****************************************************************!*\
  !*** ./src/infrastructure/datasources/cable/CableApiSource.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CableApiSource = void 0;\nconst CableDTO_1 = __webpack_require__(/*! ./CableDTO */ \"./src/infrastructure/datasources/cable/CableDTO.ts\");\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"axios\"));\nconst env_1 = __webpack_require__(/*! ../../../shared/config/env */ \"./src/shared/config/env.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass CableApiSource {\n    async get(data) {\n        return null;\n    }\n    async getData() {\n        try {\n            const baseUrl = env_1.EnvConfig.getIspServerUrl();\n            const endpoint = env_1.EnvConfig.getIspCablesEndpoint();\n            const url = `${baseUrl}${endpoint}`;\n            logger_1.default.info(`Chamando API: ${url}`);\n            const response = await axios_1.default.get(url);\n            return Array.isArray(response.data)\n                ? response.data.map((json) => new CableDTO_1.CableDTO().fromJson(json))\n                : [];\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao buscar cabos do ISP API:', error);\n            return [];\n        }\n    }\n    async save(data) {\n        return true;\n    }\n}\nexports.CableApiSource = CableApiSource;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/cable/CableApiSource.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/cable/CableDTO.ts":
/*!**********************************************************!*\
  !*** ./src/infrastructure/datasources/cable/CableDTO.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CableDTO = void 0;\nclass CableDTO {\n    fromJson(json) {\n        this.id = Number(json.id);\n        this.name = json.name;\n        this.capacity = Number(json.capacity);\n        this.boxes_connected = Array.isArray(json.boxes_connected) ? json.boxes_connected.map(Number) : [];\n        this.path = Array.isArray(json.path) ? json.path.map((p) => ({ lat: Number(p.lat), lng: Number(p.lng) })) : [];\n        return this;\n    }\n}\nexports.CableDTO = CableDTO;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/cable/CableDTO.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/cable/CableMongoSource.ts":
/*!******************************************************************!*\
  !*** ./src/infrastructure/datasources/cable/CableMongoSource.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CableMongoSource = void 0;\nconst Cable_1 = __webpack_require__(/*! ../../../domain/entities/Cable */ \"./src/domain/entities/Cable.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass CableMongoSource {\n    constructor(mongoDbManager) {\n        this.mongoDbManager = mongoDbManager;\n    }\n    async get(data) {\n        let isConnected = false;\n        try {\n            await this.mongoDbManager.connect();\n            isConnected = true;\n            const db = this.mongoDbManager['db'];\n            if (!db) {\n                throw new Error('MongoDB não conectado');\n            }\n            const cableDoc = await db.collection('cables').findOne({ id: data.id });\n            if (!cableDoc) {\n                return null;\n            }\n            return new Cable_1.Cable({\n                id: cableDoc.id,\n                name: cableDoc.name,\n                capacity: cableDoc.capacity,\n                boxes_connected: cableDoc.boxes_connected,\n                path: cableDoc.path,\n                ozmapData: cableDoc.ozmapData ?? null,\n            });\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao buscar cable no MongoDB:', error);\n            return null;\n        }\n        finally {\n            if (isConnected) {\n                await this.mongoDbManager.disconnect();\n            }\n        }\n    }\n    async getData() {\n        // TODO: Implementar integração real com MongoDB\n        return [];\n    }\n    async save(data) {\n        let isConnected = false;\n        try {\n            await this.mongoDbManager.connect();\n            isConnected = true;\n            const db = this.mongoDbManager['db'];\n            if (!db) {\n                throw new Error('MongoDB não conectado');\n            }\n            await db.collection('cables').updateOne({ id: data.id }, {\n                $set: {\n                    id: data.id,\n                    name: data.name,\n                    capacity: data.capacity,\n                    boxes_connected: data.boxes_connected,\n                    path: data.path,\n                    ozmapData: data.ozmapData\n                }\n            }, { upsert: true });\n            return true;\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao salvar cable no MongoDB:', error);\n            return false;\n        }\n        finally {\n            if (isConnected) {\n                await this.mongoDbManager.disconnect();\n            }\n        }\n    }\n}\nexports.CableMongoSource = CableMongoSource;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/cable/CableMongoSource.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/customer/CustomerApiSource.ts":
/*!**********************************************************************!*\
  !*** ./src/infrastructure/datasources/customer/CustomerApiSource.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CustomerApiSource = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"axios\"));\nconst CustomerDTO_1 = __webpack_require__(/*! ./CustomerDTO */ \"./src/infrastructure/datasources/customer/CustomerDTO.ts\");\nconst env_1 = __webpack_require__(/*! ../../../shared/config/env */ \"./src/shared/config/env.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass CustomerApiSource {\n    async get(data) {\n        return null;\n    }\n    async getData() {\n        const baseUrl = env_1.EnvConfig.getIspServerUrl();\n        const customersEndpoint = env_1.EnvConfig.getIspCustomersEndpoint();\n        const url = `${baseUrl}${customersEndpoint}`;\n        logger_1.default.info(`Chamando API: ${url}`);\n        try {\n            const response = await axios_1.default.get(url);\n            return response.data.map(obj => new CustomerDTO_1.CustomerDTO().fromJson(obj));\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao buscar clientes do ISP API:', error);\n            return [];\n        }\n    }\n    async save(data) {\n        return true;\n    }\n}\nexports.CustomerApiSource = CustomerApiSource;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/customer/CustomerApiSource.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/customer/CustomerDTO.ts":
/*!****************************************************************!*\
  !*** ./src/infrastructure/datasources/customer/CustomerDTO.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CustomerDTO = void 0;\nclass CustomerDTO {\n    fromJson(json) {\n        this.id = Number(json.id);\n        this.code = json.code;\n        this.name = json.name;\n        this.address = json.address;\n        this.box_id = Number(json.box_id);\n        return this;\n    }\n}\nexports.CustomerDTO = CustomerDTO;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/customer/CustomerDTO.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/customer/CustomerMongoSource.ts":
/*!************************************************************************!*\
  !*** ./src/infrastructure/datasources/customer/CustomerMongoSource.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CustomerMongoSource = void 0;\nconst Customer_1 = __webpack_require__(/*! ../../../domain/entities/Customer */ \"./src/domain/entities/Customer.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass CustomerMongoSource {\n    constructor(mongoDbManager) {\n        this.mongoDbManager = mongoDbManager;\n    }\n    async get(data) {\n        let isConnected = false;\n        try {\n            await this.mongoDbManager.connect();\n            isConnected = true;\n            const db = this.mongoDbManager['db'];\n            if (!db) {\n                throw new Error('MongoDB não conectado');\n            }\n            const customerDoc = await db.collection('customers').findOne({ id: data.id });\n            if (!customerDoc) {\n                return null;\n            }\n            return new Customer_1.Customer({\n                id: customerDoc.id,\n                code: customerDoc.code,\n                name: customerDoc.name,\n                address: customerDoc.address,\n                box_id: customerDoc.box_id,\n                ozmapData: customerDoc.ozmapData ?? null,\n            });\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao buscar customer no MongoDB:', error);\n            return null;\n        }\n        finally {\n            if (isConnected) {\n                await this.mongoDbManager.disconnect();\n            }\n        }\n    }\n    async getData() {\n        return [];\n    }\n    async save(data) {\n        let isConnected = false;\n        try {\n            await this.mongoDbManager.connect();\n            isConnected = true;\n            const db = this.mongoDbManager['db'];\n            if (!db) {\n                throw new Error('MongoDB não conectado');\n            }\n            const customers = db.collection('customers');\n            const { ObjectId } = __webpack_require__(/*! mongodb */ \"mongodb\");\n            let isValidObjectId = false;\n            let objectId;\n            // Verifica se id é um ObjectId válido\n            if (typeof data.id === 'string' && /^[a-f\\d]{24}$/i.test(data.id)) {\n                try {\n                    objectId = new ObjectId(data.id);\n                    isValidObjectId = true;\n                }\n                catch (_) {\n                    isValidObjectId = false;\n                }\n            }\n            // Faz update pelo campo id (que é um número), não pelo _id do MongoDB\n            await customers.updateOne({ id: data.id }, {\n                $set: {\n                    id: data.id,\n                    code: data.code,\n                    name: data.name,\n                    address: data.address,\n                    box_id: data.box_id,\n                    ...(data.ozmapData != null ? { ozmapData: data.ozmapData } : {})\n                }\n            }, { upsert: true });\n            return true;\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao salvar customer no MongoDB:', error);\n            return false;\n        }\n        finally {\n            if (isConnected) {\n                await this.mongoDbManager.disconnect();\n            }\n        }\n    }\n}\nexports.CustomerMongoSource = CustomerMongoSource;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/customer/CustomerMongoSource.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/customer/OzmapProspectSource.ts":
/*!************************************************************************!*\
  !*** ./src/infrastructure/datasources/customer/OzmapProspectSource.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OzmapProspectSource = void 0;\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass OzmapProspectSource {\n    async get(data) {\n        return null;\n    }\n    constructor(sdk) {\n        this.sdk = sdk;\n    }\n    async getData() {\n        return [];\n    }\n    async save(data) {\n        return true;\n    }\n    async saveProspect(data) {\n        try {\n            const response = await this.sdk.prospect.create(data);\n            return response;\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao salvar prospect no Ozmap:', error instanceof Error ? error.message : error);\n            return null;\n        }\n    }\n}\nexports.OzmapProspectSource = OzmapProspectSource;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/customer/OzmapProspectSource.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/drop_cable/DropCableApiSource.ts":
/*!*************************************************************************!*\
  !*** ./src/infrastructure/datasources/drop_cable/DropCableApiSource.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropCableApiSource = void 0;\nconst DropCableDTO_1 = __webpack_require__(/*! ./DropCableDTO */ \"./src/infrastructure/datasources/drop_cable/DropCableDTO.ts\");\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"axios\"));\nconst env_1 = __webpack_require__(/*! ../../../shared/config/env */ \"./src/shared/config/env.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass DropCableApiSource {\n    async get(data) {\n        return null;\n    }\n    async getData() {\n        try {\n            const baseUrl = env_1.EnvConfig.getIspServerUrl();\n            const endpoint = env_1.EnvConfig.getIspDropCablesEndpoint();\n            const url = `${baseUrl}${endpoint}`;\n            logger_1.default.info(`Chamando API: ${url}`);\n            const response = await axios_1.default.get(url);\n            return Array.isArray(response.data)\n                ? response.data.map((json) => new DropCableDTO_1.DropCableDTO().fromJson(json))\n                : [];\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao buscar drop cables do ISP API:', error);\n            return [];\n        }\n    }\n    async save(data) {\n        return true;\n    }\n}\nexports.DropCableApiSource = DropCableApiSource;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/drop_cable/DropCableApiSource.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/drop_cable/DropCableDTO.ts":
/*!*******************************************************************!*\
  !*** ./src/infrastructure/datasources/drop_cable/DropCableDTO.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropCableDTO = void 0;\nclass DropCableDTO {\n    fromJson(json) {\n        this.id = Number(json.id);\n        this.name = json.name;\n        this.box_id = Number(json.box_id);\n        this.customer_id = Number(json.customer_id);\n        return this;\n    }\n}\nexports.DropCableDTO = DropCableDTO;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/drop_cable/DropCableDTO.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/drop_cable/DropCableMongoSource.ts":
/*!***************************************************************************!*\
  !*** ./src/infrastructure/datasources/drop_cable/DropCableMongoSource.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropCableMongoSource = void 0;\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nconst DropCable_1 = __webpack_require__(/*! ../../../domain/entities/DropCable */ \"./src/domain/entities/DropCable.ts\");\nclass DropCableMongoSource {\n    constructor(mongoDbManager) {\n        this.mongoDbManager = mongoDbManager;\n    }\n    async get(data) {\n        // Busca o drop_cable pelo box_id\n        let isConnected = false;\n        try {\n            await this.mongoDbManager.connect();\n            isConnected = true;\n            const db = this.mongoDbManager['db'];\n            if (!db) {\n                throw new Error('MongoDB não conectado');\n            }\n            const dropCableDoc = await db.collection('drop_cables').findOne({ box_id: data.box_id });\n            if (!dropCableDoc) {\n                return null;\n            }\n            return new DropCable_1.DropCable({\n                id: dropCableDoc.id,\n                name: dropCableDoc.name,\n                box_id: dropCableDoc.box_id,\n                customer_id: dropCableDoc.customer_id,\n                ozmapData: dropCableDoc.ozmapData ?? null,\n            });\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao buscar drop cable no MongoDB:', error);\n            return null;\n        }\n        finally {\n            if (isConnected) {\n                await this.mongoDbManager.disconnect();\n            }\n        }\n    }\n    async getData() {\n        // TODO: Implementar integração real com MongoDB\n        return [];\n    }\n    async save(data) {\n        let isConnected = false;\n        try {\n            await this.mongoDbManager.connect();\n            isConnected = true;\n            const db = this.mongoDbManager['db'];\n            if (!db) {\n                throw new Error('MongoDB não conectado');\n            }\n            await db.collection('drop_cables').updateOne({ id: data.id }, {\n                $set: {\n                    id: data.id,\n                    name: data.name,\n                    box_id: data.box_id,\n                    customer_id: data.customer_id,\n                    ...(data.ozmapData != null ? { ozmapData: data.ozmapData } : {})\n                }\n            }, { upsert: true });\n            return true;\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao salvar drop cable no MongoDB:', error);\n            return false;\n        }\n        finally {\n            if (isConnected) {\n                await this.mongoDbManager.disconnect();\n            }\n        }\n    }\n}\nexports.DropCableMongoSource = DropCableMongoSource;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/drop_cable/DropCableMongoSource.ts?");

/***/ }),

/***/ "./src/infrastructure/datasources/drop_cable/ProjectOzmapSource.ts":
/*!*************************************************************************!*\
  !*** ./src/infrastructure/datasources/drop_cable/ProjectOzmapSource.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProjectOzmapSource = void 0;\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass ProjectOzmapSource {\n    constructor(sdk) {\n        this.sdk = sdk;\n    }\n    async get(data) {\n        return null;\n    }\n    async getData() {\n        return [];\n    }\n    async save(data) {\n        return true;\n    }\n    async saveProject(data) {\n        try {\n            const response = await this.sdk.project.create(data);\n            return response;\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao salvar prospect no Ozmap:', error instanceof Error ? error.message : error);\n            return null;\n        }\n    }\n}\nexports.ProjectOzmapSource = ProjectOzmapSource;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/datasources/drop_cable/ProjectOzmapSource.ts?");

/***/ }),

/***/ "./src/infrastructure/redis/RedisManager.ts":
/*!**************************************************!*\
  !*** ./src/infrastructure/redis/RedisManager.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst redis_1 = __webpack_require__(/*! redis */ \"redis\");\nconst env_1 = __webpack_require__(/*! ../../shared/config/env */ \"./src/shared/config/env.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass RedisManager {\n    constructor() {\n        this.client = null;\n    }\n    static getInstance() {\n        if (!RedisManager.instance) {\n            RedisManager.instance = new RedisManager();\n        }\n        return RedisManager.instance;\n    }\n    async getClient() {\n        if (!this.client) {\n            try {\n                this.client = (0, redis_1.createClient)({\n                    socket: {\n                        host: env_1.EnvConfig.getRedisHost(),\n                        port: env_1.EnvConfig.getRedisPort(),\n                        timeout: env_1.EnvConfig.getRedisTimeout(),\n                    },\n                });\n                this.client.on('error', (err) => {\n                    logger_1.default.error('Redis Client Error', err);\n                    this.client = null;\n                    throw err;\n                });\n                await this.client.connect();\n            }\n            catch (err) {\n                logger_1.default.error('Erro ao conectar ao Redis', `Host: ${env_1.EnvConfig.getRedisHost()}`, `Port: ${env_1.EnvConfig.getRedisPort()}`, err);\n                this.client = null;\n                throw err;\n            }\n        }\n        return this.client;\n    }\n}\nexports[\"default\"] = RedisManager;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/redis/RedisManager.ts?");

/***/ }),

/***/ "./src/infrastructure/repositories/BoxRepository.ts":
/*!**********************************************************!*\
  !*** ./src/infrastructure/repositories/BoxRepository.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BoxRepository = void 0;\nconst Box_1 = __webpack_require__(/*! ../../domain/entities/Box */ \"./src/domain/entities/Box.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass BoxRepository {\n    constructor(mongoDataSource, apiDataSource) {\n        this.data = [];\n        this.mongoDataSource = mongoDataSource;\n        this.apiDataSource = apiDataSource;\n    }\n    async getData() {\n        if (this.apiDataSource) {\n            const dtos = await this.apiDataSource.getData();\n            this.data = dtos.map(dto => new Box_1.Box({\n                id: dto.id,\n                name: dto.name,\n                type: dto.type,\n                lat: dto.lat,\n                lng: dto.lng,\n            }));\n            return this.data;\n        }\n        else {\n            // Busca do mongo se não houver API\n            const boxes = await this.mongoDataSource.getData();\n            this.data = boxes;\n            return this.data;\n        }\n    }\n    async save() {\n        for (const item of this.data) {\n            try {\n                await this.mongoDataSource.save(item);\n            }\n            catch (error) {\n                logger_1.default.error(`Erro ao salvar box ${item.name} no MongoDB:`, error);\n            }\n        }\n        return true;\n    }\n    async get(obj) {\n        return await this.mongoDataSource.get(obj);\n    }\n}\nexports.BoxRepository = BoxRepository;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/repositories/BoxRepository.ts?");

/***/ }),

/***/ "./src/infrastructure/repositories/CableRepository.ts":
/*!************************************************************!*\
  !*** ./src/infrastructure/repositories/CableRepository.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CableRepository = void 0;\nconst Cable_1 = __webpack_require__(/*! ../../domain/entities/Cable */ \"./src/domain/entities/Cable.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass CableRepository {\n    constructor(mongoDataSource, apiDataSource) {\n        this.data = [];\n        this.mongoDataSource = mongoDataSource;\n        this.apiDataSource = apiDataSource;\n    }\n    async getData() {\n        if (this.apiDataSource) {\n            const dtos = await this.apiDataSource.getData();\n            this.data = dtos.map(dto => new Cable_1.Cable({\n                id: dto.id,\n                name: dto.name,\n                capacity: dto.capacity,\n                boxes_connected: dto.boxes_connected,\n                path: dto.path,\n            }));\n            return this.data;\n        }\n        else {\n            // Busca do mongo se não houver API\n            const cables = await this.mongoDataSource.getData();\n            this.data = cables;\n            return this.data;\n        }\n    }\n    async save() {\n        for (const item of this.data) {\n            try {\n                await this.mongoDataSource.save(item);\n            }\n            catch (error) {\n                logger_1.default.error(`Erro ao salvar cable ${item.name} no MongoDB:`, error);\n            }\n        }\n        return true;\n    }\n    async get(obj) {\n        return await this.mongoDataSource.get(obj);\n    }\n}\nexports.CableRepository = CableRepository;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/repositories/CableRepository.ts?");

/***/ }),

/***/ "./src/infrastructure/repositories/CustomerRepository.ts":
/*!***************************************************************!*\
  !*** ./src/infrastructure/repositories/CustomerRepository.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CustomerRepository = void 0;\nconst Customer_1 = __webpack_require__(/*! ../../domain/entities/Customer */ \"./src/domain/entities/Customer.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass CustomerRepository {\n    constructor(mongoDataSource, apiDataSource) {\n        this.data = [];\n        this.apiDataSource = apiDataSource;\n        this.mongoDataSource = mongoDataSource;\n    }\n    async getData() {\n        const dtos = await this.apiDataSource.getData();\n        this.data = dtos.map(dto => new Customer_1.Customer({\n            id: dto.id,\n            code: dto.code,\n            name: dto.name,\n            address: dto.address,\n            box_id: dto.box_id,\n        }));\n        return this.data;\n    }\n    async save() {\n        for (const item of this.data) {\n            try {\n                await this.mongoDataSource.save(item);\n            }\n            catch (error) {\n                logger_1.default.error(`Erro ao salvar customer ${item.code} no MongoDB:`, error);\n            }\n        }\n        return true;\n    }\n    async get(obj) {\n        return await this.mongoDataSource.get(obj);\n    }\n}\nexports.CustomerRepository = CustomerRepository;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/repositories/CustomerRepository.ts?");

/***/ }),

/***/ "./src/infrastructure/repositories/DropCableRepository.ts":
/*!****************************************************************!*\
  !*** ./src/infrastructure/repositories/DropCableRepository.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropCableRepository = void 0;\nconst DropCable_1 = __webpack_require__(/*! ../../domain/entities/DropCable */ \"./src/domain/entities/DropCable.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nclass DropCableRepository {\n    constructor(mongoDataSource, apiDataSource) {\n        this.data = [];\n        this.apiDataSource = apiDataSource;\n        this.mongoDataSource = mongoDataSource;\n    }\n    async getData() {\n        try {\n            const dtos = await this.apiDataSource.getData();\n            this.data = dtos.map(dto => new DropCable_1.DropCable({\n                id: dto.id,\n                name: dto.name,\n                box_id: dto.box_id,\n                customer_id: dto.customer_id,\n            }));\n        }\n        catch (error) {\n            logger_1.default.error('Erro ao buscar drop cables do ISP API:', error);\n            this.data = [];\n        }\n        return this.data;\n    }\n    async save() {\n        for (const item of this.data) {\n            try {\n                await this.mongoDataSource.save(item);\n            }\n            catch (error) {\n                logger_1.default.error(`Erro ao salvar drop cable ${item.name} no MongoDB:`, error);\n            }\n        }\n        return true;\n    }\n    async get(obj) {\n        return await this.mongoDataSource.get(obj);\n    }\n}\nexports.DropCableRepository = DropCableRepository;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/repositories/DropCableRepository.ts?");

/***/ }),

/***/ "./src/infrastructure/repositories/OzmapBoxRepository.ts":
/*!***************************************************************!*\
  !*** ./src/infrastructure/repositories/OzmapBoxRepository.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OzmapBoxRepository = void 0;\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nconst BoxOzmapSource_1 = __webpack_require__(/*! ../datasources/box/BoxOzmapSource */ \"./src/infrastructure/datasources/box/BoxOzmapSource.ts\");\nconst BoxTypeOzmapSource_1 = __webpack_require__(/*! ../datasources/box/BoxTypeOzmapSource */ \"./src/infrastructure/datasources/box/BoxTypeOzmapSource.ts\");\nconst ozmap_sdk_1 = __importDefault(__webpack_require__(/*! @ozmap/ozmap-sdk */ \"./src/mocks/ozmap-sdk.ts\"));\nconst env_1 = __webpack_require__(/*! ../../shared/config/env */ \"./src/shared/config/env.ts\");\nconst BoxMongoSource_1 = __webpack_require__(/*! ../datasources/box/BoxMongoSource */ \"./src/infrastructure/datasources/box/BoxMongoSource.ts\");\nconst MongoDbManager_1 = __webpack_require__(/*! ../database/MongoDbManager */ \"./src/infrastructure/database/MongoDbManager.ts\");\nconst DropCable_1 = __webpack_require__(/*! ../../domain/entities/DropCable */ \"./src/domain/entities/DropCable.ts\");\nconst DropCableMongoSource_1 = __webpack_require__(/*! ../../infrastructure/datasources/drop_cable/DropCableMongoSource */ \"./src/infrastructure/datasources/drop_cable/DropCableMongoSource.ts\");\nclass OzmapBoxRepository {\n    constructor() {\n        const baseUrl = env_1.EnvConfig.getOzmapApiBaseUrl();\n        const apiKey = env_1.EnvConfig.getOzmapApiKey();\n        const sdk = new ozmap_sdk_1.default(baseUrl, { apiKey });\n        const mongoDbManager = new MongoDbManager_1.MongoDbManager();\n        this.boxSource = new BoxOzmapSource_1.BoxOzmapSource(sdk);\n        this.boxMongoSource = new BoxMongoSource_1.BoxMongoSource(mongoDbManager);\n        this.boxTypeSource = new BoxTypeOzmapSource_1.BoxTypeOzmapSource(sdk);\n        this.dropCableSource = new DropCableMongoSource_1.DropCableMongoSource(mongoDbManager);\n    }\n    async getData() {\n        return [];\n    }\n    async save(data) {\n        //Busca os tipos do Ozmap\n        const boxTypes = await this.boxTypeSource.getData();\n        //Busca o tipo do box\n        const boxType = boxTypes.find(type => type.code === data.type);\n        if (!boxType) {\n            logger_1.default.error('Tipo do box não encontrado');\n            return false;\n        }\n        //Busca o drop_cable pelo id do box\n        const dropCable = await this.dropCableSource.get(DropCable_1.DropCable.fromJson({ box_id: data.id }));\n        if (!dropCable) {\n            logger_1.default.error('Drop cable do box não encontrado');\n            return false;\n        }\n        //Cria o objeto do tipo CreateBoxDTO\n        const boxDto = {\n            name: data.name,\n            boxType: boxType.id,\n            coords: [data.lat, data.lng],\n            project: dropCable.ozmapData.id, // Id do Project\n            hierarchyLevel: 1,\n            implanted: true\n        };\n        const box = await this.boxSource.saveBox(boxDto);\n        if (!box) {\n            logger_1.default.error('Erro ao salvar box no Ozmap');\n            return false;\n        }\n        data.ozmapData = box;\n        const saved = await this.boxMongoSource.save(data);\n        if (!saved) {\n            logger_1.default.error('Erro ao salvar box no MongoDB');\n            return false;\n        }\n        return true;\n    }\n    async get(obj) {\n        return await this.boxMongoSource.get(obj);\n    }\n}\nexports.OzmapBoxRepository = OzmapBoxRepository;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/repositories/OzmapBoxRepository.ts?");

/***/ }),

/***/ "./src/infrastructure/repositories/OzmapCableRepository.ts":
/*!*****************************************************************!*\
  !*** ./src/infrastructure/repositories/OzmapCableRepository.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OzmapCableRepository = void 0;\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nconst MongoDbManager_1 = __webpack_require__(/*! ../database/MongoDbManager */ \"./src/infrastructure/database/MongoDbManager.ts\");\nconst env_1 = __webpack_require__(/*! ../../shared/config/env */ \"./src/shared/config/env.ts\");\nconst ozmap_sdk_1 = __importDefault(__webpack_require__(/*! @ozmap/ozmap-sdk */ \"./src/mocks/ozmap-sdk.ts\"));\nconst CableMongoSource_1 = __webpack_require__(/*! ../datasources/cable/CableMongoSource */ \"./src/infrastructure/datasources/cable/CableMongoSource.ts\");\nconst BoxMongoSource_1 = __webpack_require__(/*! ../datasources/box/BoxMongoSource */ \"./src/infrastructure/datasources/box/BoxMongoSource.ts\");\nclass OzmapCableRepository {\n    constructor() {\n        const baseUrl = env_1.EnvConfig.getOzmapApiBaseUrl();\n        const apiKey = env_1.EnvConfig.getOzmapApiKey();\n        this.sdk = new ozmap_sdk_1.default(baseUrl, { apiKey });\n        const mongoDbManager = new MongoDbManager_1.MongoDbManager();\n        this.cableRepo = new CableMongoSource_1.CableMongoSource(mongoDbManager);\n        this.boxRepo = new BoxMongoSource_1.BoxMongoSource(mongoDbManager);\n    }\n    async getData() {\n        return [];\n    }\n    async get(obj) {\n        return await this.cableRepo.get(obj);\n    }\n    async save(data) {\n        logger_1.default.info('Salvando cable no Ozmap (save)', data);\n        // Buscar os boxes conectados\n        const boxIds = data.boxes_connected || [];\n        const boxes = [];\n        for (const id of boxIds) {\n            const box = await this.boxRepo.get({ id });\n            if (box)\n                boxes.push(box);\n        }\n        // Extrair os IDs do Ozmap dos boxes\n        const ozmapBoxIds = boxes.map(b => b.ozmapData?.id).filter(Boolean);\n        // Construir o DTO\n        // Usar método do modelo para montar o DTO correto\n        const createCableDto = {\n            external_id: data.id,\n            name: data.name,\n            project: '',\n            cableType: '',\n            hierarchyLevel: 1,\n            implanted: false,\n            poles: data.path.map(point => ({ lat: point.lat, lng: point.lng })),\n        };\n        // Ajustar boxA e boxB após montar o DTO\n        if (ozmapBoxIds.length === 1) {\n            createCableDto.boxA = ozmapBoxIds[0];\n        }\n        else if (ozmapBoxIds.length >= 2) {\n            createCableDto.boxA = ozmapBoxIds[0];\n            createCableDto.boxB = ozmapBoxIds[1];\n        }\n        // Salvar cable no Ozmap\n        const ozmapCable = await this.sdk.cable.create(createCableDto);\n        if (!ozmapCable) {\n            logger_1.default.error('Erro ao salvar cable no Ozmap (SDK retornou null)');\n            return false;\n        }\n        // Atualizar campo ozmapData do cable\n        data.ozmapData = ozmapCable;\n        // Atualizar cable no MongoDB\n        const mongoResult = await this.cableRepo.save(data);\n        if (!mongoResult) {\n            logger_1.default.error('Erro ao atualizar cable no MongoDB após salvar no Ozmap');\n            return false;\n        }\n        logger_1.default.info('Cable salvo com sucesso no Ozmap e MongoDB');\n        return true;\n    }\n}\nexports.OzmapCableRepository = OzmapCableRepository;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/repositories/OzmapCableRepository.ts?");

/***/ }),

/***/ "./src/infrastructure/repositories/OzmapProjectRepository.ts":
/*!*******************************************************************!*\
  !*** ./src/infrastructure/repositories/OzmapProjectRepository.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OzmapProjectRepository = void 0;\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nconst Customer_1 = __webpack_require__(/*! ../../domain/entities/Customer */ \"./src/domain/entities/Customer.ts\");\nconst ozmap_sdk_1 = __importDefault(__webpack_require__(/*! @ozmap/ozmap-sdk */ \"./src/mocks/ozmap-sdk.ts\"));\nconst CustomerMongoSource_1 = __webpack_require__(/*! ../datasources/customer/CustomerMongoSource */ \"./src/infrastructure/datasources/customer/CustomerMongoSource.ts\");\nconst MongoDbManager_1 = __webpack_require__(/*! ../database/MongoDbManager */ \"./src/infrastructure/database/MongoDbManager.ts\");\nconst env_1 = __webpack_require__(/*! ../../shared/config/env */ \"./src/shared/config/env.ts\");\nconst ProjectOzmapSource_1 = __webpack_require__(/*! ../../infrastructure/datasources/drop_cable/ProjectOzmapSource */ \"./src/infrastructure/datasources/drop_cable/ProjectOzmapSource.ts\");\nconst DropCableMongoSource_1 = __webpack_require__(/*! ../../infrastructure/datasources/drop_cable/DropCableMongoSource */ \"./src/infrastructure/datasources/drop_cable/DropCableMongoSource.ts\");\nconst BoxMongoSource_1 = __webpack_require__(/*! ../../infrastructure/datasources/box/BoxMongoSource */ \"./src/infrastructure/datasources/box/BoxMongoSource.ts\");\nconst BoxOzmapSource_1 = __webpack_require__(/*! ../../infrastructure/datasources/box/BoxOzmapSource */ \"./src/infrastructure/datasources/box/BoxOzmapSource.ts\");\nclass OzmapProjectRepository {\n    constructor() {\n        const baseUrl = env_1.EnvConfig.getOzmapApiBaseUrl();\n        const apiKey = env_1.EnvConfig.getOzmapApiKey();\n        const sdk = new ozmap_sdk_1.default(baseUrl, { apiKey });\n        this.projectSource = new ProjectOzmapSource_1.ProjectOzmapSource(sdk);\n        const mongoDbManager = new MongoDbManager_1.MongoDbManager();\n        this.dropCableMongoSource = new DropCableMongoSource_1.DropCableMongoSource(mongoDbManager);\n        this.boxSource = new BoxMongoSource_1.BoxMongoSource(mongoDbManager);\n        this.customerSource = new CustomerMongoSource_1.CustomerMongoSource(mongoDbManager);\n        this.boxOzmapSource = new BoxOzmapSource_1.BoxOzmapSource(sdk);\n    }\n    async getData() {\n        return [];\n    }\n    async get(obj) {\n        return await this.dropCableMongoSource.get(obj);\n    }\n    async save(data) {\n        logger_1.default.info('Salvando drop cable como projeto no Ozmap (save)', data);\n        const customer = Customer_1.Customer.fromJson({ id: data.customer_id });\n        const customerData = await this.customerSource.get(customer);\n        if (!customerData) {\n            logger_1.default.error('Cliente não encontrado');\n            return false;\n        }\n        logger_1.default.info(customerData);\n        const projectDto = {\n            name: data.name,\n            external_id: data.id,\n            identifier: customerData.ozmapData?.id,\n            lng: 0,\n            lat: 0\n        };\n        const project = await this.projectSource.saveProject(projectDto);\n        if (!project) {\n            logger_1.default.error('Erro ao salvar projeto no Ozmap');\n            return false;\n        }\n        data.ozmapData = project;\n        const saved = await this.dropCableMongoSource.save(data);\n        if (!saved) {\n            logger_1.default.error('Erro ao salvar drop cable no MongoDB');\n            return false;\n        }\n        return true;\n    }\n}\nexports.OzmapProjectRepository = OzmapProjectRepository;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/repositories/OzmapProjectRepository.ts?");

/***/ }),

/***/ "./src/infrastructure/repositories/OzmapProspectRepository.ts":
/*!********************************************************************!*\
  !*** ./src/infrastructure/repositories/OzmapProspectRepository.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OzmapProspectRepository = void 0;\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nconst OzmapProspectSource_1 = __webpack_require__(/*! ../datasources/customer/OzmapProspectSource */ \"./src/infrastructure/datasources/customer/OzmapProspectSource.ts\");\nconst ozmap_sdk_1 = __importDefault(__webpack_require__(/*! @ozmap/ozmap-sdk */ \"./src/mocks/ozmap-sdk.ts\"));\nconst CustomerMongoSource_1 = __webpack_require__(/*! ../datasources/customer/CustomerMongoSource */ \"./src/infrastructure/datasources/customer/CustomerMongoSource.ts\");\nconst MongoDbManager_1 = __webpack_require__(/*! ../database/MongoDbManager */ \"./src/infrastructure/database/MongoDbManager.ts\");\nconst env_1 = __webpack_require__(/*! ../../shared/config/env */ \"./src/shared/config/env.ts\");\nclass OzmapProspectRepository {\n    constructor() {\n        const baseUrl = env_1.EnvConfig.getOzmapApiBaseUrl();\n        const apiKey = env_1.EnvConfig.getOzmapApiKey();\n        const sdk = new ozmap_sdk_1.default(baseUrl, { apiKey });\n        this.prospectSource = new OzmapProspectSource_1.OzmapProspectSource(sdk);\n        const mongoDbManager = new MongoDbManager_1.MongoDbManager();\n        this.customerMongoSource = new CustomerMongoSource_1.CustomerMongoSource(mongoDbManager);\n    }\n    async getData() {\n        return [];\n    }\n    async get(obj) {\n        return await this.customerMongoSource.get(obj);\n    }\n    async save(data) {\n        logger_1.default.info('Salvando customer como prospect no Ozmap (save)', data);\n        // Convert Customer para Prospect\n        const createProspectDto = {\n            name: data.name,\n            address: data.address,\n            code: data.code,\n            external_id: data.id,\n            tags: [data.box_id.toString()],\n        };\n        // Salvar prospect no Ozmap\n        const prospect = await this.prospectSource.saveProspect(createProspectDto);\n        if (!prospect) {\n            logger_1.default.error('Erro ao salvar prospect no Ozmap (SDK retornou null)');\n            return false;\n        }\n        // Atualizar campo ozmapData do customer\n        data.ozmapData = prospect;\n        // Atualizar customer no MongoDB\n        const mongoResult = await this.customerMongoSource.save(data);\n        if (!mongoResult) {\n            logger_1.default.error('Erro ao atualizar customer no MongoDB após salvar no Ozmap');\n            return false;\n        }\n        logger_1.default.info('Cliente salvo com sucesso no Ozmap e MongoDB');\n        return true;\n    }\n}\nexports.OzmapProspectRepository = OzmapProspectRepository;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/repositories/OzmapProspectRepository.ts?");

/***/ }),

/***/ "./src/infrastructure/services/IspSyncService.ts":
/*!*******************************************************!*\
  !*** ./src/infrastructure/services/IspSyncService.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IspSyncService = void 0;\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nconst env_1 = __webpack_require__(/*! ../../shared/config/env */ \"./src/shared/config/env.ts\");\nconst CustomerRepository_1 = __webpack_require__(/*! ../repositories/CustomerRepository */ \"./src/infrastructure/repositories/CustomerRepository.ts\");\nconst CustomerApiSource_1 = __webpack_require__(/*! ../datasources/customer/CustomerApiSource */ \"./src/infrastructure/datasources/customer/CustomerApiSource.ts\");\nconst BoxRepository_1 = __webpack_require__(/*! ../repositories/BoxRepository */ \"./src/infrastructure/repositories/BoxRepository.ts\");\nconst BoxApiSource_1 = __webpack_require__(/*! ../datasources/box/BoxApiSource */ \"./src/infrastructure/datasources/box/BoxApiSource.ts\");\nconst CableRepository_1 = __webpack_require__(/*! ../repositories/CableRepository */ \"./src/infrastructure/repositories/CableRepository.ts\");\nconst CableApiSource_1 = __webpack_require__(/*! ../datasources/cable/CableApiSource */ \"./src/infrastructure/datasources/cable/CableApiSource.ts\");\nconst DropCableRepository_1 = __webpack_require__(/*! ../repositories/DropCableRepository */ \"./src/infrastructure/repositories/DropCableRepository.ts\");\nconst DropCableApiSource_1 = __webpack_require__(/*! ../datasources/drop_cable/DropCableApiSource */ \"./src/infrastructure/datasources/drop_cable/DropCableApiSource.ts\");\nconst MongoDbManager_1 = __webpack_require__(/*! ../database/MongoDbManager */ \"./src/infrastructure/database/MongoDbManager.ts\");\nconst CustomerMongoSource_1 = __webpack_require__(/*! ../datasources/customer/CustomerMongoSource */ \"./src/infrastructure/datasources/customer/CustomerMongoSource.ts\");\nconst BoxMongoSource_1 = __webpack_require__(/*! ../datasources/box/BoxMongoSource */ \"./src/infrastructure/datasources/box/BoxMongoSource.ts\");\nconst CableMongoSource_1 = __webpack_require__(/*! ../datasources/cable/CableMongoSource */ \"./src/infrastructure/datasources/cable/CableMongoSource.ts\");\nconst DropCableMongoSource_1 = __webpack_require__(/*! ../datasources/drop_cable/DropCableMongoSource */ \"./src/infrastructure/datasources/drop_cable/DropCableMongoSource.ts\");\nconst RedisManager_1 = __importDefault(__webpack_require__(/*! ../redis/RedisManager */ \"./src/infrastructure/redis/RedisManager.ts\"));\nclass IspSyncService {\n    /**\n     * Busca os dados do servidor ISP\n     */\n    static async sync() {\n        IspSyncService._shouldStop = false;\n        const mongoDbManager = new MongoDbManager_1.MongoDbManager();\n        logger_1.default.info('Iniciando sincronização periódica com o ISP...');\n        // Repositórios a serem sincronizados\n        const repositories = [\n            new CustomerRepository_1.CustomerRepository(new CustomerMongoSource_1.CustomerMongoSource(mongoDbManager), new CustomerApiSource_1.CustomerApiSource()),\n            new DropCableRepository_1.DropCableRepository(new DropCableMongoSource_1.DropCableMongoSource(mongoDbManager), new DropCableApiSource_1.DropCableApiSource()),\n            new BoxRepository_1.BoxRepository(new BoxMongoSource_1.BoxMongoSource(mongoDbManager), new BoxApiSource_1.BoxApiSource()),\n            new CableRepository_1.CableRepository(new CableMongoSource_1.CableMongoSource(mongoDbManager), new CableApiSource_1.CableApiSource()),\n        ];\n        const requestsPerMinute = env_1.EnvConfig.getIspRequestsPerMinute();\n        const delaySeconds = env_1.EnvConfig.getIspRequestsDelaySeconds();\n        let requestsCount = 0;\n        let startWindow = Date.now();\n        let repoIndex = 0;\n        while (!IspSyncService._shouldStop) {\n            // Reinicia a janela de contagem a cada minuto\n            if ((Date.now() - startWindow) > 60000) {\n                requestsCount = 0;\n                startWindow = Date.now();\n            }\n            if (requestsCount >= requestsPerMinute) {\n                logger_1.default.info(`Limite de ${requestsPerMinute} chamadas por minuto atingido. Aguardando ${delaySeconds} segundos...`);\n                await new Promise(resolve => setTimeout(resolve, delaySeconds * 1000));\n                requestsCount = 0;\n                startWindow = Date.now();\n                continue;\n            }\n            try {\n                if (IspSyncService._shouldStop) {\n                    logger_1.default.info('Serviço de sync cancelado. Saindo do loop.');\n                    break;\n                }\n                const repo = repositories[repoIndex];\n                logger_1.default.info(`Sincronizando dados do repositório: ${repo.constructor.name}`);\n                logger_1.default.info(`Obtendo dados do repositório ${repo.constructor.name}...`);\n                const data = await repo.getData();\n                logger_1.default.info(`Salvando dados do repositório ${repo.constructor.name}...`);\n                await repo.save();\n                // Publica cada item no Redis Stream\n                try {\n                    const redis = await RedisManager_1.default.getInstance().getClient();\n                    if (!redis) {\n                        logger_1.default.error('Redis client not initialized');\n                        return;\n                    }\n                    logger_1.default.info(`Adicionando dados do repositório ${repo.constructor.name} no Redis Stream...`);\n                    for (const item of data) {\n                        const type = item.__type || item.constructor.name;\n                        await redis.xAdd('events-stream', '*', {\n                            type,\n                            data: JSON.stringify(item)\n                        });\n                    }\n                }\n                catch (error) {\n                    logger_1.default.error('Erro ao publicar no Redis Stream:', error);\n                }\n                repoIndex = (repoIndex + 1) % repositories.length;\n            }\n            catch (error) {\n                logger_1.default.error('Erro ao Comunicar com servidor ISP:', error);\n            }\n            requestsCount++;\n        }\n    }\n    static cancel() {\n        IspSyncService._shouldStop = true;\n        logger_1.default.info('Solicitação de cancelamento do serviço de sync recebida.');\n    }\n}\nexports.IspSyncService = IspSyncService;\nIspSyncService._shouldStop = false;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/services/IspSyncService.ts?");

/***/ }),

/***/ "./src/infrastructure/services/OzmapSyncService.ts":
/*!*********************************************************!*\
  !*** ./src/infrastructure/services/OzmapSyncService.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OzmapSyncService = void 0;\nconst Box_1 = __webpack_require__(/*! ../../domain/entities/Box */ \"./src/domain/entities/Box.ts\");\nconst Customer_1 = __webpack_require__(/*! ../../domain/entities/Customer */ \"./src/domain/entities/Customer.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../shared/utils/logger */ \"./src/shared/utils/logger.ts\"));\nconst RedisManager_1 = __importDefault(__webpack_require__(/*! ../redis/RedisManager */ \"./src/infrastructure/redis/RedisManager.ts\"));\nconst OzmapProspectRepository_1 = __webpack_require__(/*! ../repositories/OzmapProspectRepository */ \"./src/infrastructure/repositories/OzmapProspectRepository.ts\");\nconst OzmapBoxRepository_1 = __webpack_require__(/*! ../repositories/OzmapBoxRepository */ \"./src/infrastructure/repositories/OzmapBoxRepository.ts\");\nconst OzmapCableRepository_1 = __webpack_require__(/*! ../../infrastructure/repositories/OzmapCableRepository */ \"./src/infrastructure/repositories/OzmapCableRepository.ts\");\nconst Cable_1 = __webpack_require__(/*! ../../domain/entities/Cable */ \"./src/domain/entities/Cable.ts\");\nconst OzmapProjectRepository_1 = __webpack_require__(/*! ../../infrastructure/repositories/OzmapProjectRepository */ \"./src/infrastructure/repositories/OzmapProjectRepository.ts\");\nconst DropCable_1 = __webpack_require__(/*! ../../domain/entities/DropCable */ \"./src/domain/entities/DropCable.ts\");\nclass OzmapSyncService {\n    static get processedCount() {\n        return this._processedCount;\n    }\n    static get lastError() {\n        return this._lastError;\n    }\n    static async sync() {\n        const redis = await RedisManager_1.default.getInstance().getClient();\n        const streamKey = 'events-stream';\n        if (!redis) {\n            logger_1.default.error('Redis client not initialized');\n            return;\n        }\n        logger_1.default.info(`Starting Redis stream consumer (stream: ${streamKey})`);\n        while (!this._shouldStop) {\n            try {\n                if (!redis) {\n                    logger_1.default.error('Redis connection closed');\n                    return;\n                }\n                const messages = await redis.xRead({ key: streamKey, id: '0' });\n                if (!messages || messages.length === 0) {\n                    await new Promise(resolve => setTimeout(resolve, 100)); // Wait before retry\n                    continue;\n                }\n                for (const redisMessage of messages[0].messages) {\n                    try {\n                        logger_1.default.debug(`Processing message ID: ${redisMessage.id}`);\n                        await this.processMessage(redisMessage.message);\n                        await redis.xDel(streamKey, redisMessage.id);\n                        this._processedCount++;\n                        this._lastError = null;\n                    }\n                    catch (e) {\n                        this._lastError = e instanceof Error ? e.message : 'Unknown error';\n                        logger_1.default.error(`Error processing message ${redisMessage.id}: ${this._lastError}`);\n                    }\n                }\n            }\n            catch (e) {\n                this._lastError = e instanceof Error ? e.message : 'Unknown error';\n                logger_1.default.error(`Redis operation failed: ${this._lastError}`);\n                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait before retry\n            }\n        }\n    }\n    static async processMessage(message) {\n        logger_1.default.info(`Processando mensagem: ${JSON.stringify(message)}`);\n        if (message.type === 'Customer') {\n            const prospectRepository = new OzmapProspectRepository_1.OzmapProspectRepository();\n            const customer = Customer_1.Customer.fromJson(JSON.parse(message.data));\n            try {\n                await prospectRepository.save(customer);\n                logger_1.default.info(`Cliente ${customer.code} salvo com sucesso no Ozmap`);\n            }\n            catch (error) {\n                logger_1.default.error(`Erro ao salvar Customer  ${customer.code} no Ozmap: ${error instanceof Error ? error.message : error}`);\n            }\n        }\n        else if (message.type === \"DropCable\") {\n            const projectRepository = new OzmapProjectRepository_1.OzmapProjectRepository();\n            const dropCable = DropCable_1.DropCable.fromJson(JSON.parse(message.data));\n            try {\n                await projectRepository.save(dropCable);\n                logger_1.default.info(`DropCable ${dropCable.name} salvo com sucesso no Ozmap`);\n            }\n            catch (error) {\n                logger_1.default.error(`Erro ao salvar DropCable  ${dropCable.name} no Ozmap: ${error instanceof Error ? error.message : error}`);\n            }\n        }\n        else if (message.type === 'Box') {\n            const boxRepository = new OzmapBoxRepository_1.OzmapBoxRepository();\n            const box = Box_1.Box.fromJson(JSON.parse(message.data));\n            try {\n                await boxRepository.save(box);\n                logger_1.default.info(`Box ${box.name} salvo com sucesso no Ozmap`);\n            }\n            catch (error) {\n                logger_1.default.error(`Erro ao salvar Box  ${box.name} no Ozmap: ${error instanceof Error ? error.message : error}`);\n            }\n        }\n        else if (message.type === 'Cable') {\n            const cableRepository = new OzmapCableRepository_1.OzmapCableRepository();\n            const cable = Cable_1.Cable.fromJson(JSON.parse(message.data));\n            try {\n                await cableRepository.save(cable);\n                logger_1.default.info(`Cable ${cable.name} salvo com sucesso no Ozmap`);\n            }\n            catch (error) {\n                logger_1.default.error(`Erro ao salvar Cable  ${cable.name} no Ozmap: ${error instanceof Error ? error.message : error}`);\n            }\n        }\n        else {\n            logger_1.default.info(`Ignorando mensagem de tipo: ${message.type}`);\n        }\n    }\n    static cancel() {\n        this._shouldStop = true;\n        logger_1.default.info('Cancellation requested');\n    }\n}\nexports.OzmapSyncService = OzmapSyncService;\nOzmapSyncService._shouldStop = false;\nOzmapSyncService._processedCount = 0;\nOzmapSyncService._lastError = null;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/infrastructure/services/OzmapSyncService.ts?");

/***/ }),

/***/ "./src/mocks/ozmap-sdk.ts":
/*!********************************!*\
  !*** ./src/mocks/ozmap-sdk.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n// Mock da classe principal\nclass OZMapSDK {\n    constructor(baseUrl, options) {\n        this.prospect = {\n            create: async (data) => {\n                return Promise.resolve({\n                    id: Math.random().toString(36).substring(2, 10) + (new Date()).getTime().toString(36),\n                    name: data.name,\n                    address: data.address,\n                    code: data.code,\n                    external_id: data.external_id,\n                    tags: data.tags,\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                });\n            }\n        };\n        this.boxType = {\n            find: async (query) => {\n                return Promise.resolve({\n                    total: 2,\n                    count: 2,\n                    rows: [\n                        {\n                            config: {\n                                base: {\n                                    color: \"#3388FFFF\"\n                                },\n                                regular: {\n                                    fillColor: \"#3388FFFF\"\n                                },\n                                not_implanted: {\n                                    fillColor: \"#FFA500A6\"\n                                },\n                                draft: {\n                                    fillColor: \"#FF00FF\"\n                                }\n                            },\n                            default_reserve: 10,\n                            code: \"Nap\",\n                            brand: \"NAP650A\",\n                            mold: \"650A\",\n                            description: \"Nap\",\n                            prefix: \"Nap\",\n                            default_level: 2,\n                            default_template: \"5da6146f493d9c00066653f7\",\n                            createdAt: \"2023-01-18T14:04:50.938Z\",\n                            updatedAt: \"2023-01-18T14:04:50.938Z\",\n                            id: \"63c7fc82ea930c0014f7fcba\"\n                        },\n                        {\n                            config: {\n                                base: {\n                                    color: \"#3388FFFF\"\n                                },\n                                regular: {\n                                    fillColor: \"#3388FFFF\"\n                                },\n                                not_implanted: {\n                                    fillColor: \"#FFA500A6\"\n                                },\n                                draft: {\n                                    fillColor: \"#FF00FF\"\n                                }\n                            },\n                            default_reserve: 10,\n                            code: \"Splitter\",\n                            brand: \"SPLITTER650A\",\n                            mold: \"650A\",\n                            description: \"Splitter\",\n                            prefix: \"Splitter\",\n                            default_level: 2,\n                            default_template: \"5da6146f493d9c00066653f7\",\n                            createdAt: \"2023-01-18T14:04:50.938Z\",\n                            updatedAt: \"2023-01-18T14:04:50.938Z\",\n                            id: \"63c7fc82ea930c0014f7fcbb\"\n                        }\n                    ]\n                });\n            }\n        };\n        this.box = {\n            create: async (data) => {\n                return Promise.resolve({\n                    id: Math.random().toString(36).substring(2, 10) + (new Date()).getTime().toString(36),\n                    name: \"Box \" + Math.random().toString(36).substring(2, 10),\n                    boxType: {\n                        id: data.boxType ?? Math.random().toString(36).substring(2, 10) + (new Date()).getTime().toString(36)\n                    },\n                    hierarchyLevel: 1,\n                    project: data.project,\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                });\n            }\n        };\n        this.project = {\n            create: async (data) => {\n                return Promise.resolve({\n                    id: Math.random().toString(36).substring(2, 10) + (new Date()).getTime().toString(36),\n                    name: data.name,\n                    identifier: data.identifier,\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                });\n            }\n        };\n        this.cable = {\n            create: async (data) => {\n                return Promise.resolve({\n                    id: Math.random().toString(36).substring(2, 10) + (new Date()).getTime().toString(36),\n                    ...data\n                });\n            }\n        };\n    }\n}\n// Exporte o mock como default\nexports[\"default\"] = OZMapSDK;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/mocks/ozmap-sdk.ts?");

/***/ }),

/***/ "./src/shared/config/env.ts":
/*!**********************************!*\
  !*** ./src/shared/config/env.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EnvConfig = void 0;\nclass EnvConfig {\n    static getOzmapApiKey() {\n        return EnvConfig.OZMAP_API_KEY;\n    }\n    static getIspServerUrl() {\n        return EnvConfig.ISP_SERVER_URL;\n    }\n    static getIspRequestsPerMinute() {\n        return EnvConfig.ISP_REQUESTS_PER_MINUTE;\n    }\n    static getIspRequestsDelaySeconds() {\n        return EnvConfig.ISP_REQUESTS_DELAY_SECONDS;\n    }\n    static getIspCustomersEndpoint() {\n        return EnvConfig.ISP_CUSTOMERS_ENDPOINT;\n    }\n    static getIspCablesEndpoint() {\n        return EnvConfig.ISP_CABLES_ENDPOINT;\n    }\n    static getIspDropCablesEndpoint() {\n        return EnvConfig.ISP_DROP_CABLES_ENDPOINT;\n    }\n    static getIspBoxesEndpoint() {\n        return EnvConfig.ISP_BOXES_ENDPOINT;\n    }\n    static getOzmapBoxesEndpoint() {\n        return EnvConfig.OZMAP_BOXES_ENDPOINT;\n    }\n    static getOzmapApiBaseUrl() {\n        return EnvConfig.OZMAP_API_BASE_URL;\n    }\n    static getMongoUri() {\n        return EnvConfig.MONGO_URI;\n    }\n    static getMongoDb() {\n        return EnvConfig.MONGO_DB;\n    }\n    static getRedisPort() {\n        return EnvConfig.REDIS_PORT;\n    }\n    static getRedisHost() {\n        return EnvConfig.REDIS_HOST;\n    }\n    static getRedisTimeout() {\n        return EnvConfig.REDIS_TIMEOUT;\n    }\n}\nexports.EnvConfig = EnvConfig;\nEnvConfig.MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/';\nEnvConfig.MONGO_DB = process.env.MONGO_DB || 'isp_ozmap';\nEnvConfig.OZMAP_API_KEY = process.env.OZMAP_API_KEY || '';\nEnvConfig.ISP_SERVER_URL = process.env.ISP_SERVER_URL || 'http://localhost:4000';\nEnvConfig.ISP_REQUESTS_PER_MINUTE = process.env.ISP_REQUESTS_PER_MINUTE ? parseInt(process.env.ISP_REQUESTS_PER_MINUTE, 10) : 50;\nEnvConfig.ISP_REQUESTS_DELAY_SECONDS = process.env.ISP_REQUESTS_DELAY_SECONDS ? parseInt(process.env.ISP_REQUESTS_DELAY_SECONDS, 10) : 10;\nEnvConfig.ISP_CUSTOMERS_ENDPOINT = process.env.ISP_CUSTOMERS_ENDPOINT || '/customers';\nEnvConfig.ISP_CABLES_ENDPOINT = process.env.ISP_CABLES_ENDPOINT || '/cables';\nEnvConfig.ISP_DROP_CABLES_ENDPOINT = process.env.ISP_DROP_CABLES_ENDPOINT || '/drop_cables';\nEnvConfig.ISP_BOXES_ENDPOINT = process.env.ISP_BOXES_ENDPOINT || '/boxes';\nEnvConfig.OZMAP_BOXES_ENDPOINT = process.env.OZMAP_BOXES_ENDPOINT || '/boxes';\nEnvConfig.OZMAP_API_BASE_URL = process.env.OZMAP_API_BASE_URL || 'https://api.ozmap.com.br/v2';\nEnvConfig.REDIS_PORT = process.env.REDIS_PORT ? parseInt(process.env.REDIS_PORT, 10) : 6379;\nEnvConfig.REDIS_HOST = process.env.REDIS_HOST || 'localhost';\nEnvConfig.REDIS_TIMEOUT = 5000;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/shared/config/env.ts?");

/***/ }),

/***/ "./src/shared/utils/logger.ts":
/*!************************************!*\
  !*** ./src/shared/utils/logger.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst winston_1 = __webpack_require__(/*! winston */ \"winston\");\nconst logger = (0, winston_1.createLogger)({\n    level: 'info',\n    format: winston_1.format.combine(winston_1.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), winston_1.format.errors({ stack: true }), winston_1.format.splat(), winston_1.format.json()),\n    transports: [\n        new winston_1.transports.Console({\n            format: winston_1.format.combine(winston_1.format.colorize(), winston_1.format.simple())\n        })\n    ]\n});\nexports[\"default\"] = logger;\n\n\n//# sourceURL=webpack://isp-ozmap/./src/shared/utils/logger.ts?");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "redis":
/*!************************!*\
  !*** external "redis" ***!
  \************************/
/***/ ((module) => {

module.exports = require("redis");

/***/ }),

/***/ "winston":
/*!**************************!*\
  !*** external "winston" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("winston");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;